#!/usr/bin/bash

url="${1:?provide s3 url}"
bucket_dir="${2:?provide bucket dir}"
key_id="${3:?provide aws access key id}"
secret="${4:?provide aws access secret key}"
password="${5:?provide restic password}"
pg_backup="${6:-}"
pg_host="${7:-}"
pg_user="${8:-}"
pg_password="${9:-}"
pg_db="${10:-app}"

bucket_name="friclu-immich"
pg_port="5432"

export AWS_ACCESS_KEY_ID="$key_id"
export AWS_SECRET_ACCESS_KEY="$secret"
export RESTIC_PASSWORD="$password"

# Perform PostgreSQL backup if enabled
if [ "$pg_backup" = "true" ]; then
    echo "Starting PostgreSQL backup..."

    # Set PostgreSQL environment variables if provided
    if [ -n "$pg_password" ]; then
        export PGPASSWORD="$pg_password"
    fi

    # Create backup filename with timestamp
    backup_filename="postgres_backup_$(date +%Y%m%d_%H%M%S).sql"
    backup_path="$bucket_dir/$backup_filename"

    # Backup all databases
    pg_dump -h "$pg_host" -p "$pg_port" -U "$pg_user" -f "$backup_path" "$pg_db"
    pg_dump_result=$?

    # Push pg_dump result to prometheus
    cat <<EOF | curl --data-binary @- pushgateway-prometheus-pushgateway.pushgateway:9091/metrics/job/backup
postgres_backup_success{dir="$bucket_dir"} $pg_dump_result
EOF

    if [ $pg_dump_result -ne 0 ]; then
        echo "PostgreSQL backup failed with exit code $pg_dump_result"
        # Clean up failed backup file if it exists
        [ -f "$backup_path" ] && rm -f "$backup_path"
    else
        echo "PostgreSQL backup completed successfully: $backup_path"

        # Optional: Compress the backup
        gzip "$backup_path"
        backup_path="${backup_path}.gz"

        # Optional: Remove old postgres backups from bucket_dir (keep last 3)
        find "$bucket_dir" -name "postgres_backup_*.sql.gz" -type f | sort -r | tail -n +4 | xargs -r rm -f
    fi

    # Unset password from environment
    unset PGPASSWORD
fi

/usr/local/bin/restic -r "s3:https://$url/$bucket_name" backup --skip-if-unchanged "$bucket_dir"
cat <<EOF | curl --data-binary @- pushgateway-prometheus-pushgateway.pushgateway:9091/metrics/job/backup
restic_backup_success{dir="$bucket_dir"} $?
EOF

/usr/local/bin/restic -r "s3:https://$url/$bucket_name" forget --keep-daily 7 --keep-monthly 1 --keep-yearly 1 --prune
cat <<EOF | curl --data-binary @- pushgateway-prometheus-pushgateway.pushgateway:9091/metrics/job/backup
restic_backup_housekeeping_success{dir="$bucket_dir"} $?
EOF
